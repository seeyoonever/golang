package bot

import (
	"cs2_telegram_bot/database"
	"log"
	"os"
	"time"

	teleg "gopkg.in/telebot.v3"
)

var Bot *teleg.Bot

// –ü–µ—Ä–µ–º–µ–Ω–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
var awaitingSteamId = make(map[int64]bool)
var awaitingInfo = make(map[int64]string)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
func StartBot() {
	settings := teleg.Settings{ // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
		Token:  os.Getenv("TELEGRAM_TOKEN"),
		Poller: &teleg.LongPoller{Timeout: 10 * time.Second}, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –ü–æ–ª–ª–µ—Ä–∞, —è –≤—ã–±—Ä–∞–ª –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 10 —Å–µ–∫
	}

	var err error
	Bot, err = teleg.NewBot(settings)
	if err != nil {
		log.Fatal(err)
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	Bot.Handle("/start", handleStart)
	Bot.Handle("/register", handleRegister)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	Bot.Handle(teleg.OnText, handleTextMessage)

	Bot.Start()

}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
// teleg.Context - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleStart(context teleg.Context) error {
	return context.Send("–û–ª–∞ –ê–º–∏–≥–æ! üëã –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ CS2. –ò—Å–ø–æ–ª—å–∑—É–π /register —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ SteamId
func isValidSteamId(input string) bool {
	if len(input) != 17 {
		return false
	}
	for _, ch := range input {
		if ch < 0 || ch > 9 {
			return false
		}
	}
	return true
}

func handleRegister(context teleg.Context) error {
	userID := context.Sender().ID
	userName := context.Sender().FirstName

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	found, err := database.UserExists(userID)
	if err != nil {
		log.Fatal(err)
		return context.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!")
	}

	if found {
		return context.Send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ‚úÖ OK Let's Go")
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞–ø—É, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ—Ç –Ω–µ–≥–æ –º—ã –∂–¥—ë–º steamID
	awaitingSteamId[userID] = true
	return context.Send(userName, "–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π SteamID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

}

func handleTextMessage(context teleg.Context) error {
	userID := context.Sender().ID
	userName := context.Sender().FirstName
	text := context.Text()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ SteamID
	if awaitingSteamId[userID] {
		// –í–∞–ª–∏–¥–∞—Ü–∏—è
		if !isValidSteamId(text) {
			return context.Send(userName, "–ô–æ—É, –±—Ä–æ! –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π SteamID. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 17 —Å–∏–º–≤–æ–ª–æ–≤.")
		}

		// –ï—Å–ª–∏ steamID –≤–∞–ª–∏–¥–µ–Ω –º—ã –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ Info
		awaitingInfo[userID] = text
		delete(awaitingSteamId, userID)
		return context.Send("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–º—è/–Ω–∏–∫)")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ
	if steamID, ok := awaitingInfo[userID]; ok {
		info := text

		if len(info) > 20 {
			return context.Send(userName, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ—É –æ —Å–µ–±–µ (–∏–º—è/–Ω–∏–∫)")
		}

		err := database.AddUser(userID, steamID, info)
		if err != nil {
			return context.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!")
		}

		// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø—ã –æ–∂–∏–¥–∞–Ω–∏—è SteamID
		delete(awaitingInfo, userID)

		return context.Send(userName, "–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! Easy peasy lemon squeezy! üéâ")
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å
	return nil

}
