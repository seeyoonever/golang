package bot

import (
	"cs2_telegram_bot/database"
	"cs2_telegram_bot/steam"
	"cs2_telegram_bot/utils"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	teleg "gopkg.in/telebot.v3"
)

var Bot *teleg.Bot

// –ü–µ—Ä–µ–º–µ–Ω–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
var awaitingSteamId = make(map[int64]bool)
var awaitingInfo = make(map[int64]string)
var awaitingDelete = make(map[int64]bool)

// var adminID = os.Getenv("MY_TELEGRAM_ID")

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
func StartBot() {
	settings := teleg.Settings{ // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
		Token:  os.Getenv("TELEGRAM_TOKEN"),
		Poller: &teleg.LongPoller{Timeout: 10 * time.Second}, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –ü–æ–ª–ª–µ—Ä–∞, —è –≤—ã–±—Ä–∞–ª –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 10 —Å–µ–∫
	}

	var err error
	Bot, err = teleg.NewBot(settings)
	if err != nil {
		log.Fatal(err)
	}

	StartStatusChecker(Bot)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	Bot.Handle(teleg.OnText, handleTextMessage)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	Bot.Handle("/start", handleStart)
	Bot.Handle("/register", handleRegister)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	Bot.Handle("/admin", handleAdmin)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
	Bot.Handle("/delete", handleDelete)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ cs2
	Bot.Handle("/status", handleStatus2)

	Bot.Start()

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
// teleg.Context - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleStart(context teleg.Context) error {
	return context.Send("–û–ª–∞ –ê–º–∏–≥–æ! üëã –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ CS2. –ò—Å–ø–æ–ª—å–∑—É–π /register —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ SteamId
func isValidSteamId(input string) bool {
	if len(input) != 17 {
		return false
	}
	for _, ch := range input {
		if ch < '0' || ch > '9' {
			return false
		}
	}
	return true
}

func handleRegister(context teleg.Context) error {
	userID := context.Sender().ID
	userName := context.Sender().FirstName

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	found, err := database.UserExists(userID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return context.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!")
	}

	if found {
		return context.Send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. ‚úÖ OK Let's Go")
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞–ø—É, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ—Ç –Ω–µ–≥–æ –º—ã –∂–¥—ë–º steamID
	utils.SetWithTTL(awaitingSteamId, userID, true, 5*time.Minute)

	return context.Send(userName + " –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π SteamID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

}

func handleTextMessage(context teleg.Context) error {
	userID := context.Sender().ID
	userName := context.Sender().FirstName
	chatID := context.Chat().ID
	text := context.Text()

	log.Println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", context.Text(), "–æ—Ç", context.Sender().ID)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ SteamID
	if awaitingSteamId[userID] {
		// –í–∞–ª–∏–¥–∞—Ü–∏—è
		if !isValidSteamId(text) {
			return nil
			// return context.Send(userName + " –ô–æ—É, –±—Ä–æ! –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π SteamID. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 17 —Å–∏–º–≤–æ–ª–æ–≤.")
		}

		// –ï—Å–ª–∏ steamID –≤–∞–ª–∏–¥–µ–Ω –º—ã –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ Info
		utils.SetWithTTL(awaitingInfo, userID, text, 5*time.Minute)

		delete(awaitingSteamId, userID)
		return context.Send("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–º—è/–Ω–∏–∫)\n–í–Ω–∏–º–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ
	if steamID, ok := awaitingInfo[userID]; ok {
		info := text

		if len(info) > 40 {
			return context.Send(userName + " –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ—É –æ —Å–µ–±–µ (–∏–º—è/–Ω–∏–∫)")
		}

		err := database.AddUser(userID, steamID, info, chatID)

		// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞–ø—ã –æ–∂–∏–¥–∞–Ω–∏—è SteamID
		delete(awaitingInfo, userID)

		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
			return context.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–π SteamID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /register")
		}

		return context.Send(userName + " –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! Easy peasy lemon squeezy! üéâ")
	}

	if awaitingDelete[userID] {
		delete(awaitingDelete, userID)

		tgID, err := strconv.ParseInt(text, 10, 64)
		if err != nil {
			fmt.Println("Error (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ telegramID –≤ —á–∏—Å–ª–æ): ", err)
			return context.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}

		err = database.DeleteUser(tgID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err)
			return context.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		return context.Send("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")

	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å
	return nil

}

func handleAdmin(context teleg.Context) error {
	userID := context.Sender().ID

	context.Send(userID)

	log.Println(userID)

	// admin, err := strconv.ParseInt(adminID, 10, 64)
	// if err != nil {
	// 	fmt.Println("Error: ", err)
	// }

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if userID != 330686271 {
		return context.Send("DENIED ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
	}

	users, err := database.GetAllUsers()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ", err)
	}

	if len(users) == 0 {
		return context.Send("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
	}

	message := "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
	for _, user := range users {
		message += fmt.Sprintf("üßç TelegramID: %d\nüéÆ SteamID: %s\nüìù Info: %s\n\n", user.TelegramID, user.SteamID, user.Info)
	}

	return context.Send(message)

}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–µ–ª–∞—é –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –≤ –Ω–µ–π –Ω–µ—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É—Ä–∞–∫–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞)
func handleDelete(context teleg.Context) error {
	userID := context.Sender().ID

	context.Send(userID)

	log.Println(userID)

	// admin, err := strconv.ParseInt(adminID, 10, 64)
	// if err != nil {
	// 	fmt.Println("Error (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ telegramID –≤ —á–∏—Å–ª–æ): ", err)
	// }

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
	if userID != 330686271 {
		return context.Send("DENIED ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
	}

	utils.SetWithTTL(awaitingDelete, userID, true, 5*time.Minute) // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è

	return context.Send("–í–≤–µ–¥–∏—Ç–µ telegramID –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")

}

func handleStatus(context teleg.Context) error {
	userID := context.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	found, err := database.UserExists(userID)
	if err != nil {
		log.Fatal(err)
		return context.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!")
	}

	if !found {
		return context.Send("üôÖ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users, err := database.GetAllUsers()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ", err)
		return context.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	var onlineList []string

	for _, user := range users {
		playing, persona, err := steam.IsPlayingCS2(user.SteamID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CS2", err)
			continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
		}
		if playing {
			info := fmt.Sprintf("- %s (%s)", user.Info, persona)
			onlineList = append(onlineList, info)
		}
	}

	if len(onlineList) == 0 {
		return context.Send("üò¥ –ù–∏–∫—Ç–æ –∏–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ CS2")
	}

	response := "üéÆ –°–µ–π—á–∞—Å –∏–≥—Ä–∞—é—Ç –≤ CS2:\n" + strings.Join(onlineList, "\n")

	return context.Send(response)
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ë–ê–¢–ß v1.1
func handleStatus2(context teleg.Context) error {
	userID := context.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
	found, err := database.UserExists(userID)
	if err != nil {
		log.Fatal(err)
		return context.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Negativ!")
	}

	if !found {
		return context.Send("üôÖ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users, err := database.GetAllUsers()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ", err)
		return context.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	// –ì–æ—Ç–æ–≤–∏–º –ø–∞–∫–µ—Ç
	const batchSize = 100
	var responses []string

	for i := 0; i < len(users); i += batchSize {
		end := i + batchSize
		if end > len(users) {
			end = len(users)
		}

		batch := users[i:end]
		var steamIDs []string
		steamIDtoInfo := make(map[string]string)

		for _, user := range batch {
			steamIDs = append(steamIDs, user.SteamID)
			steamIDtoInfo[user.SteamID] = user.Info
		}

		players, err := steam.GetPlayersStatuses(steamIDs)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤:", err)
			return context.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Steam API")
		}

		for _, player := range players {
			if player.GameID != "" && player.GameID == steam.CS22GameID {
				info := steamIDtoInfo[player.SteamID]
				responses = append(responses, fmt.Sprintf("üü¢ %s (%s) –∏–≥—Ä–∞–µ—Ç –≤ CS2", info, player.Persona))
			}
		}
	}

	if len(responses) == 0 {
		return context.Send("–ù–∏–∫—Ç–æ –∏–∑ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ CS2")
	}

	return context.Send(strings.Join(responses, "\n"))

}

func StartStatusChecker(bot *teleg.Bot) {

	go func() {
		for {
			log.Println("–®–ï–î–£–õ–ï–† –ó–ê–ü–£–©–ï–ù")
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			users, err := database.GetAllUsers()
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err)
				continue
			}
			log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã - ", users)
			// –ì–æ—Ç–æ–≤–∏–º –ø–∞–∫–µ—Ç
			const batchSize = 100

			for i := 0; i < len(users); i += batchSize {
				end := i + batchSize
				if end > len(users) {
					end = len(users)
				}

				batch := users[i:end]
				var steamIDs []string
				steamIDtoInfo := make(map[string]string)
				steamIDtoChatID := make(map[string]int64)

				for _, user := range batch {
					steamIDs = append(steamIDs, user.SteamID)
					steamIDtoInfo[user.SteamID] = user.Info
					steamIDtoChatID[user.SteamID] = user.ChatID
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
				players, err := steam.GetPlayersStatuses(steamIDs)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤:", err)
				}
				log.Println("–ò–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã - ", players)
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
				for _, player := range players {

					steamID := player.SteamID
					status := player.GameID == steam.CS22GameID

					prevStatus, err := database.GetUserStatus(steamID)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã player_status", err)
						continue
					}
					log.Println("–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ - ", player.Persona, prevStatus)

					if !prevStatus && status {
						//–±—ã–ª –Ω–µ –≤ –∏–≥—Ä–µ, —Å—Ç–∞–ª –≤ –∏–≥—Ä–µ
						chatID := steamIDtoChatID[steamID]
						log.Println("–ß–ê–¢", chatID)
						_, err := bot.Send(&teleg.Chat{ID: chatID}, fmt.Sprintf("üéÆ %s –ï–±–∞—à–∏—Ç –≤ CS2!", player.Persona))
						if err != nil {
							log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
						}
					}

					// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
					err = database.UpdatePlayerStatus(steamID, status)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ", err)
					}

				}

			}

			// –¢–∞–π–º –∞—É—Ç
			time.Sleep(1 * time.Minute)

		}
	}()
}
