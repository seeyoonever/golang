package main

import (
	"fmt"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑
var favoritLangs []string

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
var memory = make(map[string]string)

func main() {
	fmt.Println("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.")

	name := askName()
	greetUser(name)

	for {
		fmt.Println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
		fmt.Println("1. joke ‚Äî —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É")
		fmt.Println("2. age  ‚Äî –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
		fmt.Println("3. hello ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
		fmt.Println("4. favlang - –ª—é–±–∏–º—ã–µ —è–∑—ã–∫–∏")
		fmt.Println("5. listlangs - —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —è–∑—ã–∫–æ–≤")
		fmt.Println("6. remember - –∑–∞–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ")
		fmt.Println("7. recall - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á—ë–º-–ª–∏–±–æ")
		fmt.Println("8. showmem - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
		fmt.Println("--- exit ‚Äî –≤—ã–π—Ç–∏")

		var command string
		fmt.Print("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É: ")
		fmt.Scanln(&command)

		if command == "exit" {
			fmt.Println("–ü–æ–∫–∞, " + name + "!")
			break // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
		}

		handleCommand(command)
	}
}

// –°–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
func askName() string {
	fmt.Print("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ")
	var name string
	fmt.Scanln(&name)
	return name
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
func greetUser(name string) {
	fmt.Println("–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è,", name+"!")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
func handleCommand(cmd string) {
	if cmd == "joke" {
		fmt.Println("–ü–æ—á–µ–º—É –≥—É—Å—å –ø–µ—Ä–µ—à—ë–ª –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å null pointer exception.")
	} else if cmd == "age" {
		askAge()
	} else if cmd == "hello" {
		fmt.Println("–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòä")
	} else if cmd == "favlang" {
		favlang()
	} else if cmd == "listlangs" {
		listLangs()
	} else if cmd == "remember" {
		rememberSomething()
	} else if cmd == "recall" {
		recallSomething()
	} else if cmd == "showmem" {
		showMemory()
	} else {
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–∏–º–æ–≥–æ —è–∑—ã–∫–∞
func favlang() {
	var lang string
	flag := true
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
	fmt.Scanln(&lang)

	for _, language := range favoritLangs {
		if lang == language {
			fmt.Println("–¢–∞–∫–æ–π —è–∑—ã–∫ —Ç—ã —É–∂–µ —É–∫–∞–∑—ã–≤–∞–ª")
			flag = false
		}
	}

	if flag == true {
		favoritLangs = append(favoritLangs, lang)
		fmt.Println("–î–æ–±–∞–≤–∏–ª ", lang, " –≤ —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —è–∑—ã–∫–æ–≤")
	}

}

// –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö —è–∑—ã–∫–æ–≤
func listLangs() {
	if len(favoritLangs) == 0 {
		fmt.Println("–¢—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª, –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ –ª—é–±–∏—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
	} else {
		fmt.Println("–¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ —è–∑—ã–∫–∏: ")
		for i, lang := range favoritLangs {
			fmt.Printf("%d. %s\n", i+1, lang)
		}
	}
}

// –í–æ–∑—Ä–∞—Å—Ç
func askAge() {
	var age int
	fmt.Print("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? ")
	fmt.Scanln(&age)

	if age < 20 {
		fmt.Println("–û–≥–æ, –¥–∞ —Ç—ã —Å–æ–≤—Å–µ–º –ø–∏–∑–¥—é–∫")
	} else if age < 30 {
		fmt.Println("–¢—ã –º–æ–ª–æ–¥–æ–π –∏ –ø–∏–∑–¥–∞—Ç—ã–π")
	} else {
		fmt.Println("–°—Ç–∞—Ä—ã–π, –Ω–æ –Ω–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π!")
	}

}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
func rememberSomething() {
	var key, value string

	fmt.Println("–ß—Ç–æ –º–Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –í–í–ï–î–ò –ö–õ–Æ–ß")
	fmt.Scanln(&key)

	fmt.Println("–ß—Ç–æ –º–Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É?")
	fmt.Scanln(&value)

	memory[key] = value
	fmt.Println("–ó–∞–ø–æ–º–Ω–∏–ª:", key, " - ", value)
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–ª—é—á—É
func recallSomething() {
	var key string

	if len(memory) == 0 {
		fmt.Println("–¢–µ–±–µ –Ω–µ—á–µ–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å")
		return
	}

	fmt.Println("–ß—Ç–æ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å? –í–í–ï–î–ò –ö–õ–Æ–ß")
	for k, _ := range memory {
		fmt.Printf("- %s\n", k)
	}
	fmt.Scanln(&key)

	value, exist := memory[key]
	if exist {
		fmt.Println("–¢—ã –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ: ", key, " - ", value)
	} else {
		fmt.Println("–Ø –Ω–∏—á–µ–≥–æ –æ–± —ç—Ç–æ–º –Ω–µ –∑–Ω–∞—é")
	}

}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ–π –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
func showMemory() {
	if len(memory) == 0 {
		fmt.Println("–Ø –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª")
	} else {
		fmt.Println("–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –∞–º–∏–≥–æ")
		for key, value := range memory {
			fmt.Printf("- %s: %s\n", key, value)
		}
	}
}
