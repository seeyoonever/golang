package steam

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

const CS22GameID = "730"

type Player struct {
	SteamID string `json:"steamid"`
	GameID  string `json:"gameid,omitempty"` // omitempty –≥–æ–≤–æ—Ä–∏—Ç GO –æ —Ç–æ–º, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ –∏ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	Persona string `json:"personaname"`
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏–µ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã –≤—ã—Ç–∞—â–∏–º –∏–≥—Ä–∞–µ—Ç –ª–∏ –æ–Ω –≤ –∫—Å2
type PlayerInfoResponse struct {
	Response struct {
		Players []Player `json:"players"`
	} `json:"response"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ö–°2 —Å–µ–π—á–∞—Å
func IsPlayingCS2(steamID string) (bool, string, error) {
	apiKey := os.Getenv("STEAM_API_KEY")
	if apiKey == "" {
		return false, "", fmt.Errorf("STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	url := fmt.Sprintf("https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=%s&steamids=%s", apiKey, steamID)

	resp, err := http.Get(url)
	if err != nil {
		return false, "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Steam API: %w", err)
	}
	defer resp.Body.Close()

	var result PlayerInfoResponse
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return false, "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: %w", err)
	}

	if len(result.Response.Players) == 0 {
		return false, "", fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	player := result.Response.Players[0]

	if player.GameID != "" && player.GameID == CS22GameID {
		return true, player.Persona, nil
	}

	return false, player.Persona, nil
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ –±–∞—Ç—á–µ–º
func GetPlayersStatuses(steamIDs []string) ([]Player, error) {
	apiKey := os.Getenv("STEAM_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç—ã–º–∏
	ids := strings.Join(steamIDs, ",")
	fmt.Println(ids)
	url := fmt.Sprintf(
		"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=%s&steamids=%s",
		apiKey, ids)

	for attempt := 1; attempt <= 10; attempt++ {
		resp, err := http.Get(url)

		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Steam API: %w", err)
		}

		log.Println(resp)

		if resp.StatusCode == 429 {
			log.Println("üö´ –ü–æ–ª—É—á–µ–Ω 429 Too Many Requests. –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
			time.Sleep(10 * time.Second)
			continue
		}

		if resp.StatusCode != 200 {
			body, _ := io.ReadAll(resp.Body)
			resp.Body.Close()
			return nil, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ %d: %s", resp.StatusCode, body)
		}

		body, err := io.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
		}

		var result PlayerInfoResponse
		if err := json.Unmarshal(body, &result); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: %w", err)
		}

		return result.Response.Players, nil
	}

	// var result PlayerInfoResponse
	// if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
	// 	return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: %w", err)
	// }

	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Steam API –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫")
}
